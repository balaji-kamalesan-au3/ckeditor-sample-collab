/// <reference types="react" />
/**
 * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.
 */
import * as React from 'react';
import { IconRenderProp } from '@ckbox/components';

interface ParsedAssetMetadata {
    /**
     * Asset blurhash.
     */
    blurHash?: string;
    /**
     * Asset description.
     */
    description: string;
    /**
     * Asset width in px.
     */
    width?: number;
    /**
     * Asset height in px.
     */
    height?: number;
    /**
     * Set of custom attributes.
     */
    customAttributes?: Record<string, unknown>;
}

interface ParsedAsset {
    /**
     * Asset id.
     */
    id: string;
    /**
     * Asset name.
     */
    name: string;
    /**
     * Asset file extension.
     */
    extension: string;
    /**
     * Converted asset size.
     */
    size?: number;
    /**
     * Asset upload date.
     */
    uploadedAt?: string;
    /**
     * Asset metadata.
     */
    metadata: ParsedAssetMetadata;
    /**
     * Asset category id.
     */
    categoryId: string;
}

interface AssetExtraProps {
    /**
     * API origin.
     */
    origin: string;
    /**
     * Callback that returns URL to the resource.
     */
    getUrl: (forceDownload?: boolean) => string;
    /**
     * Callback that returns URL to image of specified dimensions. Resource at URL is cached on CDN.
     * Returns `false` if there is no image available for the asset.
     */
    getResponsiveImageUrl: (width: number, heightOrFormat?: number | string, format?: string) => string | false;
}
interface Asset$1 extends AssetExtraProps {
    data: ParsedAsset;
}
declare type AssetsConfigOnChooseEnhanced = (assets: Asset$1[]) => void;
interface AssetsConfig {
    /**
     * Callback invoked upon clicking on `Choose` button.
     * List of currently selected assets is passed as an argument.
     */
    onChoose?: AssetsConfigOnChooseEnhanced;
}

declare type CategoriesConfig = {
    /**
     * Maps category names to custom icons.
     */
    icons?: Record<string, IconRenderProp>;
};

interface LanguageConfig {
    /**
     * Turns on debugging mode for simplifying translation process (info logged to JS console).
     */
    debug?: boolean;
    /**
     * Defines language code in case if an object is passed, e.g. 'en'.
     */
    ui?: string;
}
declare type LanguageConfigProp = string | LanguageConfig;

interface DialogModeProps {
    /**
     * Initial dialog height.
     */
    height?: string | number;
    /**
     * Toggles dialog.
     */
    open: boolean;
    /**
     * Callback invoked upon clicking on close button.
     */
    onClose?: () => void;
    /**
     * Initial dialog width.
     */
    width?: string | number;
}
declare type DialogProps = boolean | DialogModeProps;

declare type Asset = Asset$1;
interface CoreContext {
    /**
     * Configures assets options.
     */
    assets?: AssetsConfig;
    /**
     * Configures origin for public assets.
     */
    assetsOrigin?: string;
    /**
     * Configures categories options.
     */
    categories?: CategoriesConfig;
    /**
     * Dialog mode options.
     */
    dialog?: DialogProps;
    /**
     * Unique ID used to distinguish various app instances.
     * If not set, app instances will share common user preferences.
     */
    id?: string;
    /**
     * Language options.
     */
    language?: LanguageConfigProp;
    /**
     * Origin of the backend API service.
     */
    serviceOrigin?: string;
    /**
     * Theme to use.
     */
    theme?: string;
    /**
     * Token endpoint URL.
     */
    tokenUrl: string;
}
declare const CoreContext: React.Context<CoreContext>;

declare const Core: React.FC<Props>;
declare type Props = CoreContext;

/**
 * Current version of the package.
 */
declare const CKBOX_VERSION: string | undefined;

export { Asset, Core as CKBox, Props, CKBOX_VERSION as version };
